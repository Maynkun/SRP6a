…………………………………………………………………..
import javax.naming.InvalidNameException;
import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // N generated using "openssl dhparam -text 1024 -2",
        // where g equals 2
    	int length = 1024; //Длина числа
    	Random rnd = new Random();
        BigInteger N = BigInteger.probablePrime(length, rnd);
        BigInteger g = BigInteger.valueOf(2);
        // in SRP6a, k = H(N, g)
        BigInteger k = BigInteger.valueOf(3);

        Server server = new Server(N, g, k);

        System.out.println("Добрый день! Вас приветствует страница аутентификации!");
        while (true) {
            System.out.println("Вы желаете войти или зарегистрироваться? (⌒‿⌒)");
            System.out.println("1. Зарегистрироваться");
            System.out.println("2. Войти");
            System.out.println("3. Выйти");
            Scanner input = new Scanner(System.in);
            int choice = input.nextInt();
            switch (choice) {
                // Регистрация
                case 1: {
                    System.out.println("Введите логин: ");
                    String login = input.next();

                    System.out.println("Введите пароль: ");
                    String password = input.next();

                    Client client = new Client(N, g, k, login, password);

                    client.set_SXV();
                    String s = client.get_s();
                    BigInteger v = client.get_v();
                    try {
                        server.set_ISV(login, s, v);
                        System.out.println("Вы зарегистрировались!");
                        //Если в мапе есть имя, то:
                    } catch (InvalidNameException e) {
                        System.out.println("Имя занято!");
                    }
                    break;
                }
                // Вход
                case 2: {
                    System.out.println("Введите логин: ");
                    String login = input.next();

                    System.out.println("Введите пароль: ");
                    String password = input.next();

                    Client client = new Client(N, g, k, login, password);


                    BigInteger A = client.gen_A();
                    try {
                        server.set_A(A);

                    } catch (IllegalAccessException e) {
                        System.out.println("A = 0");
                        break;
                    }

                    try {
                        String s = server.get_s(login);
                        BigInteger B = server.create_B();
                        client.receiveSaltAndB(s, B);
                    } catch (IllegalAccessException e) {
                        System.out.println("Такого пользователя не существует");
                        break;
                    }

                    try {
                        client.gen_u();
                        server.gen_u();
                    } catch (IllegalAccessException e) {
                        System.out.println("Соединение прервано!");
                        break;
                    }

                    client.SessionKey();
                    server.SessionKey();

                    BigInteger server_R = server.create_M(client.ClientConfirm());

                    if (client.compare_R_C(server_R))
                        System.out.println("Соединение установлено");
                    else
                        System.out.println("Неверный пароль");
                    break;
                }
                default:
                	System.out.println("Спасибо за визит!");
                    return;
            }
            System.out.println();
            System.out.println("Что дальше?");
        }
    }
}
……………………………………………………………………………………………………..
import javax.naming.InvalidNameException;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class Server {
    private BigInteger N;   // безопасное простое
    private BigInteger g;   // генератор по модулю N
    private BigInteger k;   // параметр-множитель
    private BigInteger v;   // верификатор
    private BigInteger A;   // ОК клиента
    private BigInteger b;   // секретное значение сервера
    private BigInteger B;   // ОК сервера
    private BigInteger u;   // скремблер
    private BigInteger K;   // общий хэш-ключ сессии
    private String I;       // логин
    private String s;       // соль
    private Map<String, Pair<String, BigInteger>> BD = new HashMap<>(); //БД значений с клиента

    public Server(BigInteger N, BigInteger g, BigInteger k) {
        this.N = N;
        this.g = g;
        this.k = k;
    }
//Загоняем в БД Логин с солью и верификатором от клиента
    public void set_ISV(String I, String s, BigInteger v) throws InvalidNameException {
        if (!BD.containsKey(I)) {
            BD.put(I, new Pair<>(s, v));
        } else
            throw new InvalidNameException();
    }
//Получем от клиента его ОК:
    public void set_A(BigInteger A) throws IllegalAccessException {
        // A != 0
        if (A.equals(BigInteger.ZERO))
            throw new IllegalAccessException();
        else
            this.A = A;
    }
//Создаём ОК серва:
    public BigInteger create_B() {
        // b - рандомное большое число
        b = new BigInteger(1024, new Random());
        // B = (k*v + g^b mod N) mod N
        B = (k.multiply(v).add(g.modPow(b, N))).mod(N);
        return B;
    }
//генерим скремблер из А и В
    public void gen_u() throws IllegalAccessException {
        // u = H(A, B)
        u = SHA256.hash(A, B);
        // u != 0
        if (u.equals(BigInteger.ZERO))
            throw new IllegalAccessException();
    }
//Сервер достаёт соль с верификатором для логина, вычисленные при регистрации
    public String get_s(String I) throws IllegalAccessException {
        if (BD.containsKey(I)) {
            this.I = I;
            s = BD.get(this.I).first;
            v = BD.get(this.I).second;
            return s;
        } else
            throw new IllegalAccessException();
    }
//Сервер со своей стороны так же вычисляет общий ключ сессии
    public void SessionKey() {
        // S = (A*(v^u mod N))^b mod N
        BigInteger S = A.multiply(v.modPow(u, N)).modPow(b, N);
        // K = H(S)
        K = SHA256.hash(S);
    }
//Сервер у себя вычисляет M используя свою копию K, и проверяет равенство c M_C.
    public BigInteger create_M(BigInteger M_C) {
        // M = H(H(N) xor H(g), H(I), s, A, B, K)
        BigInteger M_S = SHA256.hash(SHA256.hash(N).xor(SHA256.hash(g)), SHA256.hash(I), s, A, B, K);
        // R = H(A, M, K)
        if (M_S.equals(M_C))
            return SHA256.hash(A, M_S, K);
        else
            return BigInteger.ZERO;
    }
//Заносим в мапу параметры: соль с верификатором
    private class Pair<A, B> {
        A first;
        B second;

        Pair(A first, B second) {
            this.first = first;
            this.second = second;
        }
    }
}
……………………………………………………………………………………

import java.math.BigInteger;
import java.util.Random;

public class Client {
private BigInteger N;   // безопасное простое
private BigInteger g;   // генератор по модулю N
private BigInteger k;   // параметр-множитель
private BigInteger x;   // x = H(s,p)
private BigInteger v;   // v = g^x % n
private BigInteger a;   // секретное число
private BigInteger A;   // ОК клиента
private BigInteger B;   // ОК сервера
private BigInteger u;   // скремблер
private BigInteger K;   // hash for session key
private BigInteger M_C; //
private String I;       // логин
private String p;       // пароль
private String s;       // Соль

public Client(BigInteger N, BigInteger g, BigInteger k, String I, String p) {
        this.N = N;
        this.g = g;
        this.k = k;
        this.I = I;
        this.p = p;
        }
//Шаг 1: Клиент вычисляет соль, x и верификатор
public void set_SXV() {
        s = getSalt();
        // x = H(s, p)
        x = SHA256.hash(s, p);
        // v = g^x mod N
        v = g.modPow(x, N);
        }

private String getSalt() {
		int size = 10;
		String ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_";
		Random RANDOM = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < size; ++i) {
        sb.append(ALPHABET.charAt(RANDOM.nextInt(ALPHABET.length())));
        }
        return sb.toString();
        }

// Шаг 2: Создаём ОК клиента:
public BigInteger gen_A() {
        // а - большое рандомное число
        a = new BigInteger(1024, new Random());
        // A = g^a % N
        A = g.modPow(a, N);
        return A;
        }
// Получаем ОК сервера
public void receiveSaltAndB(String s, BigInteger B) throws IllegalAccessException {
       this.s = s;
        this.B = B;
        //B!=0
    if (B.equals(BigInteger.ZERO))
        throw new IllegalAccessException();
        }

//Шаг 3: генерим скремблер из А и Б:
public void gen_u() throws IllegalAccessException {
        // u = H(A, B)
        u = SHA256.hash(A, B);
        // u != 0
        if (u.equals(BigInteger.ZERO))
        throw new IllegalAccessException();
        }
//Шаг 4: генерация ключа сессии по соли и паролю
public void SessionKey() {
        // x = H(s, p)
        x = SHA256.hash(s, p);
        // S = (B - K*(g^x mod N))^(a+u*x)) mod N
        BigInteger S = (B.subtract(k.multiply(g.modPow(x, N)))).modPow(a.add(u.multiply(x)), N);
        // K = H(S)
        K = SHA256.hash(S);
        }
//Шаг 5: подтверждение от клиента
public BigInteger ClientConfirm() {
        // M = H(H(N) xor H(g), H(I), s, A, B, K)
        M_C = SHA256.hash(SHA256.hash(N).xor(SHA256.hash(g)), SHA256.hash(I), s, A, B, K);
        return M_C;
        }
// Клиент вычисляет своё R и сравнивает с R сервера
public boolean compare_R_C(BigInteger R_S) {
        // R = H(A, M, K)
        BigInteger R_C = SHA256.hash(A, M_C, K);
        return R_C.equals(R_S);
        }

public String get_s() {
        return s;
        }

public BigInteger get_v() {
        return v;
        }
        }
………………………………………………………………………………..
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class SHA256 {
    private static String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder();
        for (byte hash_byte : hash) {
            String hex = Integer.toHexString(0xff & hash_byte);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }

    public static BigInteger hash(Object... input) {
        try {
            MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
            for (Object i : input) {
                if (i instanceof String) {
                    sha256.update(((String) i).getBytes());
                } else if (i instanceof BigInteger) {
                    sha256.update(((BigInteger) i).toString(10).getBytes());
                } else if (i instanceof byte[]) {
                    sha256.update((byte[]) i);
                } else throw new IllegalArgumentException();
            }
            return new BigInteger(bytesToHex(sha256.digest()), 16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return BigInteger.ZERO;
        }
    }
}
